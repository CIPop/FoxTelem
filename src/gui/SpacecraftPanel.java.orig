package gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.ButtonGroup;
import javax.swing.JPanel;
<<<<<<< HEAD
import javax.swing.JRadioButton;

import common.Config;
=======
>>>>>>> 1.05e
import common.Spacecraft;
import decoder.Decoder;
import decoder.SourceIQ;

public class SpacecraftPanel extends JPanel implements ActionListener {

<<<<<<< HEAD
	Decoder decoder;
	SourceIQ iqSource;
=======
/**
* 
* FOX 1 Telemetry Decoder
* @author chris.e.thompson g0kla/ac2cz
*
* Copyright (C) 2016 amsat.org
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
* 
* The SpacecraftPanel is a JPanel on the SourceTab (input tab).  It could also be displayed on the
* SpacecraftTab.  This contains the paramaters that can be changed on the decoder for a specific spacecraft
* Ideally it includes all of the following: 
*   Track - visible.  STARTS the decoder, as apposed to the Source
*   Lower Freq Bound, Upper Freq Bound  - THIS CAN START IN THE SPACECRAFT FRAME
*   Track Doppler
*   Find Signal - CAN BE UNIVERSAL INITIALLY, BUT SHOULD BE HERE
*   - Peak Threshold
*   - AvgPwr Threshold
*   - BitSNR Threshold
* 
* Note that this does NOT include the static data for the satellite, which is changed in the SpacecraftFrame window:
*   Frequency
*   MODE - which sets the demodulator (FM, PSK)
*   RATE - 200bps, 1200bps
*   DECODER - FOX-1 DUV, FOX-1 HS - once all the paramaters are set, this becomes the name only
*   Bandwidth 
*   Filter Type, Freq and Length
*     
* These are the paramaters that are specific to a given 
* channel where we are trying to decode a spacecraft.
* 
* Several classes will read the paramaters, so they will be saved in Config, with the spacecraft as part of the
* config.
* 
*/
@SuppressWarnings("serial")
public class SpacecraftPanel extends JPanel {
>>>>>>> 1.05e
	Spacecraft fox;
	
	protected JRadioButton highSpeed;
	protected JRadioButton psk;
	protected JRadioButton lowSpeed;
	protected JRadioButton auto;
	
	SpacecraftPanel(Spacecraft s) {

		fox = s;
		
		lowSpeed = addRadioButton("DUV", this );
		highSpeed = addRadioButton("High Speed", this );
		psk = addRadioButton("PSK", this );
//		highSpeed = addRadioButton("High Speed", panel_2 );
		auto = addRadioButton("Auto", this );
		ButtonGroup group = new ButtonGroup();
		group.add(lowSpeed);
		group.add(highSpeed);
		group.add(psk);
		group.add(auto);
		
		if (Config.autoDecodeSpeed) {
			auto.setSelected(true);
			//enableFilters(true);
		} else
		if (Config.highSpeed) {
			highSpeed.setSelected(true);
			//enableFilters(false);
		} else {
			lowSpeed.setSelected(true);
			//enableFilters(true);
		}
	}
	
	public void start(Decoder d, SourceIQ iq) {
		decoder = d;
		iqSource = iq;
	}
	private JRadioButton addRadioButton(String name, JPanel panel) {
		JRadioButton radioButton = new JRadioButton(name);
		radioButton.setEnabled(true);
		radioButton.addActionListener(this);
		panel.add(radioButton);
		return radioButton;
	}
	@Override
	public void actionPerformed(ActionEvent e) {
		
		if (e.getSource() == highSpeed) { 
				Config.highSpeed = true;
				Config.autoDecodeSpeed = false;
			//	enableFilters(false);
			//	autoViewpanel.setVisible(false);
				if (iqSource != null) iqSource.setMode(SourceIQ.MODE_FM);
				//Config.save();
		}
		if (e.getSource() == lowSpeed) { 
			Config.highSpeed = false;
			Config.autoDecodeSpeed = false;
		//	enableFilters(true);
		//	autoViewpanel.setVisible(false);
			if (iqSource != null) iqSource.setMode(SourceIQ.MODE_NFM);
			//Config.save();
		}
		if (e.getSource() == psk) { 
			Config.highSpeed = false;
			Config.autoDecodeSpeed = false;
		//	enableFilters(false);
		//	autoViewpanel.setVisible(false);
			if (iqSource != null) iqSource.setMode(SourceIQ.MODE_PSK);
			//Config.save();
		}
//		if (e.getSource() == auto) { 
//			Config.autoDecodeSpeed = true;
		//	enableFilters(true);
//			if (iqSource != null) iqSource.setMode(SourceIQ.MODE_NFM);
//			if (iqSource2 != null) iqSource2.setMode(SourceIQ.MODE_FM);
	//		autoViewpanel.setVisible(true);
			//Config.save();
//		}
	}
}
